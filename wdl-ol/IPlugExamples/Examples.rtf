{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier-BoldOblique;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid601\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}}
\paperw11900\paperh16840\vieww25380\viewh19600\viewkind0
\deftab720
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\b\fs38 \cf0 WDL-OL IPlug Examples Instructions
\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\b0 \cf0 www.olilarkin.co.uk\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0
\b\fs28 \cf0 Introduction
\b0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf0 \
This folder contains example/template projects to demonstrate how to use different features of my modified IPlug and WDL. They also serve as a testbed to make sure that the various aspects are working. Each folder contains scripts which automate the build process and package everything along with a pdf manual in an installer. The scripts also code sign binaries/installers and set icons where required.\
\
Projects are provided for Visual Studio 2017 and Xcode 9. You cannot downgrade the VS2017 projects to work with older versions.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\b \cf0 Requirements:
\b0 \
\
Some of these are optional, but without them the build-scripts will need to be edited, otherwise you'll get errors.\
\
Windows\

\b \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\b0 \cf0 {\listtext	\'95	}Msysgit {\field{\*\fldinst{HYPERLINK "http://code.google.com/p/msysgit/"}}{\fldrslt http://code.google.com/p/msysgit/}}
\b \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\b0 \cf0 {\listtext	\'95	}Visual Studio Community 2017\
{\listtext	\'95	}Python 2.x {\field{\*\fldinst{HYPERLINK "http://www.python.org/"}}{\fldrslt http://www.python.org/}}\
{\listtext	\'95	}Innosetup {\field{\*\fldinst{HYPERLINK "http://www.jrsoftware.org/isinfo.php"}}{\fldrslt http://www.jrsoftware.org/isinfo.php}}\
{\listtext	\'95	}7zip {\field{\*\fldinst{HYPERLINK "http://www.7-zip.org/"}}{\fldrslt http://www.7-zip.org/}} (if you want to zip instead of make an installer)\
{\listtext	\'95	}Pace tools and certificate for code signing AAX binaries\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf0 \
Mac
\b \
\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\b0 \cf0 {\listtext	\'95	}Git-osx {\field{\*\fldinst{HYPERLINK "http://code.google.com/p/git-osx-installer/"}}{\fldrslt http://code.google.com/p/git-osx-installer/}}
\b \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\b0 \cf0 {\listtext	\'95	}Xcode 9.x installed, including command-line tools \
{\listtext	\'95	}Packages for building macOS installers {\field{\*\fldinst{HYPERLINK "http://s.sudre.free.fr/Software/Packages/about.html"}}{\fldrslt http://s.sudre.free.fr/Software/Packages/about.html}}\
{\listtext	\'95	}setfileicon utility {\field{\*\fldinst{HYPERLINK "http://maxao.free.fr/telechargements/setfileicon.gz"}}{\fldrslt http://maxao.free.fr/telechargements/setfileicon.gz}}\
{\listtext	\'95	}Mac Developer ID Certificates for code signing installers for 10.8>\
{\listtext	\'95	}Mac 3rd Party App Dev Certificates for code signing binaries and installers for the Mac App Store\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}Pace tools and certificate for code signing AAX binaries\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0
\b\fs28 \cf0 About the examples:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls8\ilvl0
\b0 \cf0 {\listtext	\'95	}IPlugChunks - shows how to use chunks in a plugin. Chunks allow you to store arbitrary data in the plugin's state as apposed to just a value for each parameter.\
{\listtext	\'95	}IPlugControls -  demos the various IControl classes (example by Captain Caveman)\
{\listtext	\'95	}IPlugConvoEngine - demos WDL_ConvolutionEngine() - Cockos' fast convolution engine (example by Tale)\
{\listtext	\'95	}IPlugDistortion - demos Tale's bessel filter implementation for realtime oversampling (example by Tale)\
{\listtext	\'95	}IPlugEEL - demonstrates using Cockos' EEL library for run-time expression evaluation \
{\listtext	\'95	}IPlugEffect - The most basic IPlug plugin, a gain control similar to AGain in the VST2 SDK, however it has a GUI\
{\listtext	\'95	}IPlugGUIResize - has three buttons to choose different gui sizes at runtime\
{\listtext	\'95	}IPlugHostDetect - displays the host name and version (not very reliable at the moment)\
{\listtext	\'95	}IPlugMonoSynth - a basic monophonic IPlug synth, showing how to handle MIDI messages sample accurately. Also shows how to use Tale's IKeyboardControl.\
{\listtext	\'95	}IPlugMouseTest - demonstrates an XY pad IControl which is linked to two plugin parameters\
{\listtext	\'95	}IPlugMultiChannel  - demos a multi-channel IPlug plugin, and how to test if channels are connected\
{\listtext	\'95	}IPlugMultiTargets - a midi effect plugin that also demos compilation to IOS, getting tempo info, and pop up menus\
{\listtext	\'95	}IPlugOpenGL - using OpenGL in IPlug\
{\listtext	\'95	}IPlugPlush -  shows how to use Cockos' Plush to do basic 3D Graphics\
{\listtext	\'95	}IPlugPolySynth - a basic polyphonic IPlug synth\
{\listtext	\'95	}IPlugResampler - demonstrates using WDL_Resampler\
{\listtext	\'95	}IPlugSideChain - a plugin that shows how to setup a sidechain input, for VST3, AU and RTAS\
{\listtext	\'95	}IPlugText - demos different ways to draw text\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf0 \
The IPlugEffect project is the main starting project I use. If you are not interested in AAX, RTAS etc, I suggest you duplicate this and manually remove those targets to give you a new clean starting template with just your preferred formats in it.\
\
Rather than changing settings for individual targets/projects inside the Xcode Project/Visual Studio solutions, most customisations can be done in the xcconfig and property sheets.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\b\fs28 \cf0 Duplicating Projects\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\b0 \cf0 The IPlugExamples folder contains a python script to duplicate an IPlug project. This allows you to very quickly create a new project based on one of the examples. It does a multiple file find and replace to substitute the new name of the project for the old name, and also to change the manufacturer name. Once you have done this you only need to change two more things by hand in resource.h to make your plugin unique.\
\
You can duplicate a project as follows with the following commands in the macOS terminal or on the windows command prompt. In this example i will copy the IPlugEffect project to a new project called MyNewPlugin\'85\
\
- open terminal or cmd.exe and navigate to the IPlugExamples folder\
- type \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f1\i\b \cf0 	duplicate.py [inputprojectname] [outputprojectname] [manufacturername]\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\i0\b0 \cf0 \
e.g\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f2 \cf0 	
\f1\i\b duplicate.py IPlugEffect MyNewPlugin OliLarkin\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\i0\b0 \cf0 \
you might need to do 
\f1\i\b ./duplicate.py
\f0\i0\b0  on macOS\
\
- open  
\f3\b MyNewPlugin/resource.h
\f0\b0  and change 
\f3\b PLUG_UNIQUE_ID
\f0\b0  and 
\f3\b PLUG_MFR_ID
\f0\b0 \
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\b\fs28 \cf0 Debugging Setups\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\fs26 \cf0 \

\b0 .xcscheme files are set up to use some common hosts for debugging the various formats in Xcode.
\b \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\partightenfactor0

\b0\fs24 \cf0 To debug an Audiounit using auval, remember to change the auval executable arguments to match plugin's type and IDs: 
\b aufx/aumf/aumu PLUG_UNIQUE_ID PLUG_MFR_ID
\b0 \
\
AU hosts cache information about the plugin I/O channels etc, so I have added a build script that deletes the caches after a build. If this becomes annoying (it will cause Logic to rescan plugins) you can disable it.\
\
There is also a 
\b validate_audiounit.command
\b0  shell script which will is a helper that runs auval with your plugins' unique IDs, and optionally performs the leaks test.\
\
The windows debug setups use {\field{\*\fldinst{HYPERLINK "http://www.hermannseib.com/english/savihost.htm"}}{\fldrslt SAVIHost}} for VST2 debugging, and VST3PluginTestHost for VST3 debugging (in Steinberg VST3 SDK)\
\
You should install VSTHost to 
\b C:\\Program Files\\VSTHost\\vsthost.exe
\b0  (on x64 you should install the 64bit version here)\
\
To debug RTAS you need to install the PT Dev build. By default my debugging setup expects it to be installed in 
\b /Applications/Avid/ProTools_3PDev
\b0  on mac and 
\b %ProgramFiles%\\ Avid\\ProTools_3PDev
\b0  on windows\
\
\

\b\fs28 Installers & one-click build scripts\

\fs24 \

\b0 The example projects contain shell scripts for both Windows (
\b makedist-win.bat
\b0 ) and macOS (
\b makedist-mac.command
\b0 ) that build everything, code-sign (where relevant) and package the products in an installer including license, readme.txt, changelog.txt and manual. On Windows the installer program "Innosetup" is used, on macOS "Packages". A python script 
\b update_version.py
\b0  is called to look at 
\b resource.h
\b0  and get the version from the 
\b PLUG_VER #define
\b0 . It then updates the 
\b info.plist
\b0  files and installer scripts with the version number (in the format major.minor.bugfix). If you aren't building some components, e.g. RTAS, the build scripts may need to be modified. Please alter the license and readme text and remove my name from them if you release a plugin publicly. On macOS the script can also code-sign the standalone app and builds a .pkg for the appstore (commented out).
\b \

\b0 \
\
}